@startuml UpdateTaskSequenceDiagram
title FlowCLI: update-task Sequence
autonumber

actor User
participant "FlowCLI Main" as CLI
participant "CommandParser" as Parser
participant "UpdateCommand" as UpdateCmd
participant "CommandContext" as Ctx
participant "Projects Model" as Projects
participant "Target Project" as Project
participant "UI" as UI
participant "Logger" as Log

User -> CLI: Enter "update 1 /p MyProject /t NewDesc"
CLI -> Parser: parse("update 1 /p MyProject /t NewDesc")
Parser --> CLI: new UpdateCommand(rawArgs)

CLI -> UpdateCmd: execute(Ctx)

group Argument parsing
  UpdateCmd -> UpdateCmd: extract arguments (project, index, new desc/deadline/priority)
  alt no update fields provided
    UpdateCmd -> Log: warn("No update fields provided")
    UpdateCmd --> CLI: throw InvalidArgumentException
    CLI -> UI: showError("No update fields provided")
    return
  end
end

UpdateCmd -> Ctx: getProjects(), getUi()
Ctx --> UpdateCmd: Projects, UI

group Validation
  UpdateCmd -> Projects: getProject(projectName)
  Projects --> UpdateCmd: project|null
  alt project not found
    UpdateCmd -> Log: warning("Project not found: {name}")
    UpdateCmd --> CLI: throw ProjectNotFoundException
    CLI -> UI: showError("Project not found: {name}")
    return
  end
  UpdateCmd -> Project: getProjectTasks()
  alt index out of bounds
    UpdateCmd -> Log: warning("Index out of range")
    UpdateCmd --> CLI: throw IndexOutOfRangeException
    CLI -> UI: showError("Index out of range")
    return
  end
end

group Update
  UpdateCmd -> Project: updateTask(index, new values...)
  Project --> UpdateCmd: updatedTask
  UpdateCmd -> UI: showUpdatedTask(updatedTask)
  UpdateCmd -> Log: info("Updated task in project {name}")
  UpdateCmd --> CLI: return true
end

== Logging ==
CLI -> Log: fine("update-task completed")

@enduml